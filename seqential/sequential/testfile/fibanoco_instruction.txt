 // Storing instructions sequentially in a 2D array
        //60-address of exit
        inst_mem[0] = 32'b000000000000_01111_011_00011_0000011; // ld x3, 0(x15)    x3-a=0
        inst_mem[1] = 32'b000000001000_01111_011_00100_0000011; // ld x4, 16(x15)  
        inst_mem[2] = 32'b000000010000_01111_011_11110_0000011; // ld x30, 32(x15)
 // ld x30, 16(x15)

  // ld x30, 16(x15) // ld x30, 16(x14)   x6=n
        inst_mem[3] = 32'b0_000000_01010_11110_000_01110_1100011; // beq x10 x30
        inst_mem[4]=  32'b0000000_00100_00011_000_00111_0110011 ;// add x7 x3 x4 
        inst_mem[5] = 32'b0000000_00000_00100_000_00011_0110011; // add x3, x4, x0 
        inst_mem[6] = 32'b0000000_00000_00111_000_00100_0110011; // add x4, x7, x0
        inst_mem[7] = 32'b000000000001_01010_000_01011_0010011; // add x11, x10, 1
        inst_mem[8] = 32'b0000000_00000_01011_000_01010_0110011; // add x10, x11, x0
         inst_mem[9] = 32'b1_111111_00000_00000_000_1010_1_1100011; // beq x0, x0, -6 // beq x0, x0, -5
        inst_mem[10] = 32'b11111111111111111111111111111111; // EXIT (111111 opcode for finish)